name: Deploy to GitHub Pages

on:
  release:
    types: [created]
  push:
    branches:
      - main

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Get release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages:gh-pages || git checkout --orphan gh-pages
          git checkout gh-pages || git checkout --orphan gh-pages
      
      - name: Deploy to gh-pages
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          IS_RELEASE="${{ steps.get_tag.outputs.is_release }}"
          
          # Checkout main branch files
          git checkout main -- .
          
          # Remove .git directory from staged changes if present
          git reset HEAD .git 2>/dev/null || true
          git checkout -- .git 2>/dev/null || true
          
          if [ "$IS_RELEASE" == "true" ]; then
            # For releases, create a versioned directory
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
            TARGET_DIR="${REPO_NAME}/${TAG}"
            
            mkdir -p "$TARGET_DIR"
            
            # Copy all files from lab4 directory to versioned directory
            if [ -d "lab4" ]; then
              cp -r lab4/* "$TARGET_DIR/"
            else
              cp -r * "$TARGET_DIR/" 2>/dev/null || true
            fi
            
            # Remove non-web files from target
            rm -rf "$TARGET_DIR/.git" "$TARGET_DIR/.github" 2>/dev/null || true
            
            # Update or create index.html in repository root if it doesn't exist
            if [ ! -f "${REPO_NAME}/index.html" ]; then
              mkdir -p "${REPO_NAME}"
              echo '<!DOCTYPE html><html lang="ru"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Версии релизов</title></head><body><h1>Доступные версии релизов</h1><ul id="versions"></ul></body></html>' > "${REPO_NAME}/index.html"
            fi
            
            git add "${REPO_NAME}"
            
            # Create root index.html that redirects to latest
            echo "<!DOCTYPE html><html><head><meta charset=\"UTF-8\"><meta http-equiv=\"refresh\" content=\"0; url=${REPO_NAME}/${TAG}/index.html\"><title>Redirecting...</title></head><body><p>Redirecting to <a href=\"${REPO_NAME}/${TAG}/index.html\">latest version</a>...</p></body></html>" > index.html
            git add index.html
            
          else
            # For regular commits, just update the root
            if [ -d "lab4" ]; then
              cp -r lab4/* .
              rm -rf lab4
            fi
            
            # Clean up
            rm -rf .github .git 2>/dev/null || true
            
            git add .
          fi
          
          # Commit and push
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy ${TAG} to GitHub Pages"
            git push origin gh-pages --force
          fi