name: Deploy to GitHub Pages

on:
  release:
    types: [created]
  push:
    branches:
      - main

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
      
      - name: Get release tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages:gh-pages || git checkout --orphan gh-pages
          git checkout gh-pages || git checkout --orphan gh-pages
      
      - name: Deploy to gh-pages
        run: |
          TAG="${{ steps.get_tag.outputs.tag }}"
          IS_RELEASE="${{ steps.get_tag.outputs.is_release }}"
          
          # Checkout main branch files
          git checkout main -- .
          
          # Remove .git directory from staged changes if present
          git reset HEAD .git 2>/dev/null || true
          git checkout -- .git 2>/dev/null || true
          
          if [ "$IS_RELEASE" == "true" ]; then
            # For releases, create a versioned directory
            REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
            TARGET_DIR="${REPO_NAME}/${TAG}"
            
            mkdir -p "$TARGET_DIR"
            
            # Copy all files from lab4 directory to versioned directory
            if [ -d "lab4" ]; then
              cp -r lab4/* "$TARGET_DIR/"
            else
              cp -r * "$TARGET_DIR/" 2>/dev/null || true
            fi
            
            # Remove non-web files from target
            rm -rf "$TARGET_DIR/.git" "$TARGET_DIR/.github" 2>/dev/null || true
            
            # Update or create index.html in repository root if it doesn't exist
            if [ ! -f "${REPO_NAME}/index.html" ]; then
              mkdir -p "${REPO_NAME}"
              cat > "${REPO_NAME}/index.html" << 'EOF'
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í–µ—Ä—Å–∏–∏ —Ä–µ–ª–∏–∑–æ–≤</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 40px 20px;
            margin: 0;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .version-list {
            list-style: none;
            padding: 0;
        }
        .version-item {
            margin-bottom: 15px;
        }
        .version-link {
            display: block;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            text-decoration: none;
            border-radius: 10px;
            transition: transform 0.3s ease;
            font-weight: bold;
        }
        .version-link:hover {
            transform: translateX(10px);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Ä–µ–ª–∏–∑–æ–≤</h1>
        <ul class="version-list" id="versions"></ul>
    </div>
    <script>
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        fetch('.')
            .then(r => r.text())
            .then(html => {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const links = Array.from(doc.querySelectorAll('a'))
                    .map(a => a.getAttribute('href'))
                    .filter(href => href && href.startsWith('v'));
                
                const list = document.getElementById('versions');
                if (links.length === 0) {
                    list.innerHTML = '<li style="text-align: center; color: #666;">–í–µ—Ä—Å–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤</li>';
                } else {
                    links.forEach(version => {
                        const li = document.createElement('li');
                        li.className = 'version-item';
                        li.innerHTML = `<a href="${version}/" class="version-link">üöÄ –í–µ—Ä—Å–∏—è ${version}</a>`;
                        list.appendChild(li);
                    });
                }
            })
            .catch(() => {
                document.getElementById('versions').innerHTML = 
                    '<li style="text-align: center; color: #666;">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Ä—Å–∏–π...</li>';
            });
    </script>
</body>
</html>
EOF
            fi
            
            git add "${REPO_NAME}"
            
            # Create root index.html that redirects to latest
            cat > index.html << EOF
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="refresh" content="0; url=${REPO_NAME}/${TAG}/index.html">
    <title>Redirecting...</title>
</head>
<body>
    <p>Redirecting to <a href="${REPO_NAME}/${TAG}/index.html">latest version</a>...</p>
</body>
</html>
EOF
            git add index.html
            
          else
            # For regular commits, just update the root
            if [ -d "lab4" ]; then
              cp -r lab4/* .
              rm -rf lab4
            fi
            
            # Clean up
            rm -rf .github .git 2>/dev/null || true
            
            git add .
          fi
          
          # Commit and push
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy ${TAG} to GitHub Pages"
            git push origin gh-pages --force
          fi